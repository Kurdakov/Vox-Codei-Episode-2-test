1. Obviously, Vox Codei 2 now has moving blocks, compared to static blocks in Vox Codei 1
so seems following things are needed:
	a) have moving blocks which are aka blocks	in breakout (arkanoid) games
	b) have multiple static maps on which it is easy to test bombs (like already done)
	c) a loop to simulate life of bombs for 3 steps  so that nothing wrong goes - if goes - just backtrack - so 'mini simulator for 3 steps with moving blocks')
	d) predict future positions of moving blocks ( basically blocks are moving by quite simple rules, so it is possible to predict their movements - blocks move
	up down or left right, but also - are restricted either by walls/passive nodes(#)/other nodes ( which might disappear - so range of movements might change
	during game )
	e) to get initial conditions ( how blocks are moving ) we need to wait second step - after which we can compare maps and extract directions of blocks - seems
	a first step to be done - finding directions and tracking if just second frame is always enough to predict )
	e) instead of predicting bombs effects on the same map - predict them into future ( by removing nodes on 'statically' generated maps)
	f) for plan - there is need not only place bomb but also indicate it's desired tick.
	
2.  From this follows that first step is that
    code few maps and compare by this figuring directions for nodes, test on all test cases if that is enought, then it will be possible to create nodes with movements 	
3.  update 26.08.2017 
    for now: test2.cpp finds directions, test1.cpp provides a way for 'parametric' computation of node positions for entire game, given initial conditions
    now steps looks like following
    	- create moving blocks with appropriate params (initial position, the moving boundaries due to walls) from initial date, have 'render' method to
		render successive maps for bomb drops
		- due to parametric computation of positions it will be possible just to repeat Vox Codei 1 brute force approach to analyse successive maps,
		- there will be need, though, to keep track of 'killed' dynamically created blocks. One approach is - instead of just providing new maps by copying them (like in Vox Codei 1) in recursive search -
		it is possible to copy blocks and then make them 'render' successive maps - so 'moving blocks' should live more or less independent life from main 'simulation' class.
		- possibly there will be (unlike first game, where all computations were done before first output of command) time limit on depth of search. 
		So successive deepening likely won't give final solution, but should at least answer following question - wait at this step, or apply current
		best bomb, hopefully it will be possible to figure answer to this quesion in one computational step time ( 0.1 sec as I understand )
4. update 02.09.2017
	pass 9 tests of 10. What can be tried? First - from game screen it is clear, that killing those moving objects together with statics is a priority 
	over eliminating of max number of blocks which might lead to unsatisfactory solution.
	though this approach might clash with 'patience' 09 test where killing moving objects together with statics - might lead to loss but still if I beat 10th test
	then I could tune it to fit 09 test.  Another approach comes out of the fact, that best killing of max blocks creates 'alone' blocks which need a separate bomb.
	So I might to track those moving blocks which accumulate as 'alone' after applying currently selected bomb,
	if then there are more 'alone' blocks than available bombs just do not apply currently selected best position and look for next 'best' position which will
	not create alone blocks.
	
	
		
	
	